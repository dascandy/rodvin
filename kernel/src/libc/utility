#ifndef __LIBCPP_UTILITY
#define __LIBCPP_UTILITY

namespace std {

template <typename T, typename U>
class pair {
public:
  pair(T t, U u) : first(t), second(u) {}
  bool operator==(const pair<T, U>& o) const {
    return (o.first == first &&
            o.second == second);
  }
  T first;
  U second;
};

template <typename T, typename U>
std::pair<T, U> make_pair(T t, U u) {
  return std::pair<T, U>(t, u);
}

template <typename T> struct remove_reference { typedef T type; };
template <typename T> struct remove_reference<T&> { typedef T type; };
template <typename T> struct remove_reference<T&&> { typedef T type; };

template <typename T>
struct is_const {
  enum { value = false };
};
template <typename T>
struct is_const<const T> {
  enum { value = true };
};

template <typename T>
typename remove_reference<T>::type&& move(T&& arg)
{
  static_assert(!std::is_const<T>::value, "Do not use std::move on const objects, it does not work.");
  return static_cast<typename remove_reference<T>::type&&>(arg);
}

template <class T> T&& forward (typename remove_reference<T>::type& arg) noexcept {
  return static_cast<decltype(arg)&&>(arg);
}

template <class T> T&& forward (typename remove_reference<T>::type&& arg) noexcept {
  return static_cast<decltype(arg)&&>(arg);
}

}

#endif


