#ifndef DEQUE_H
#define DEQUE_H

#include <stddef.h>
#include <utility>
#include <stdio.h>

namespace std {

template <typename T>
class deque {
public:
  typedef T value_type;
  typedef T& reference;
  typedef const T& const_reference;
  typedef size_t size_type;

  deque() {
    first = last = new stride;
    first->first = first->last = 0;
    first->next = first->prev = NULL;
  }
  deque(const deque& o)  = delete;
  /*{
    first = last = new stride;
    first->first = first->last = 0;
    first->next = first->prev = NULL;
    for (const auto& x : o) {
      push_back(x);
    }
  }*/
  deque& operator=(const deque& o) {
    while (!empty())
      pop_front();

    for (const auto& x : o) {
      push_back(x);
    }
    return *this;
  }
  ~deque() {
    while (!empty())
      pop_front();
    delete first;
  }
  bool empty() const {
    return first == last && first->first == first->last;
  }
  size_type size() const {
    size_type n = 0;
    stride* s = first;
    while (s != last) {
      n += s->last - s->first;
      s = s->next;
    }
    n += s->last - s->first;
    return n;
  }
  void push_back(const value_type &v) {
    printf("F3%p %p %p %p\n", this, first, last, &((T*)(last->buf))[last->last]);
    reserve_1_at_end();
    new (&((T*)(last->buf))[last->last]) T(v);
    last->last++;
  }
  void push_back(value_type&& v) {
    printf("F2%p %p %p %p\n", this, first, last, &((T*)(last->buf))[last->last]);
    reserve_1_at_end();
    new (&((T*)(last->buf))[last->last]) T(std::move(v));
    last->last++;
  }
  template <class... Args>
  void emplace_back (Args&&... args) {
    printf("F1%p %p %p %p\n", this, first, last, &((T*)(last->buf))[last->last]);
    reserve_1_at_end();
    new (&((T*)(last->buf))[last->last]) T(std::forward(args)...);
    last->last++;
  }
  void push_front(const value_type &v) {
    reserve_1_at_begin();
    first->first--;
    new (&((T*)(first->buf))[first->first]) T(v);
  }
  void push_front(value_type&& v) {
    reserve_1_at_begin();
    first->first--;
    new (&((T*)(first->buf))[first->first]) T(std::move(v));
  }
  template <class... Args>
  void emplace_front (Args&&... args) {
    reserve_1_at_begin();
    first->first--;
    new (&((T*)(first->buf))[first->first]) T(std::forward(args...));
  }
  reference front() {
    return ((T*)(first->buf))[first->first];
  }
  const_reference front() const {
    return ((T*)(first->buf))[first->first];
  }
  reference back() {
    return ((T*)(last->buf))[last->last-1];
  }
  const_reference back() const {
    return ((T*)(last->buf))[last->last-1];
  }
  void pop_back() {
    printf("PB%p %p %p %p\n", this, first, last, &((T*)(last->buf))[last->last]);
    ((T*)(last->buf))[last->last].~T();
    last->last--;
    if (last->last == 0 && first != last) {
      stride* n = last;
      last = last->prev;
      last->next = NULL;
      delete n;
    }
  }
  void pop_front() {
    printf("PF%p %p %p %p\n", this, first, last, &((T*)(last->buf))[last->last]);
    ((T*)(first->buf))[first->first].~T();
    first->first++;
    if (first->first == 255 && first != last) {
      stride* n = first;
      first = first->next;
      first->prev = NULL;
      delete n;
    }
  }
private:
  void reserve_1_at_begin() {
    if (first->first == 0) {
      stride* n = new stride;
      n->first = n->last = 255;
      n->next = first;
      first->prev = n;
      n->prev = NULL;
      first = n;
    }
  }
  void reserve_1_at_end() {
    if (last->last == 255) {
      stride* n = new stride;
      n->first = n->last = 0;
      n->prev = last;
      last->next = n;
      n->next = NULL;
      last = n;
    }
  }
  struct stride {
    stride *next, *prev;
    char buf[sizeof(T) * 255];
    uint8_t first, last;
  };
  stride *first, *last;
};

}

#endif


